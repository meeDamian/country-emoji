import test from 'ava';
import {flag} from '../src/main.js';

test('[main.js].flag() is exported properly', async t => {
	const {flag: fn} = await import('../src/main.js');
	t.is(typeof fn, 'function', 'flag should be a function');
});

test('[lib.js].flag() is exported properly', async t => {
	const {flag: fn} = await import('../src/lib.js');
	t.is(typeof fn, 'function', 'flag should be a function');
});

test('fails if empty', t => {
	const emoji = flag();
	t.is(emoji, undefined, 'Should return undefined for empty input');
});

//
// from country NAMES
//
test('converts name', t => {
	const emoji = flag('Taiwan');
	t.is(emoji, 'ğŸ‡¹ğŸ‡¼', 'Should return ğŸ‡¹ğŸ‡¼ for Taiwan');
});

test('converts short name', t => {
	const emoji = flag('UK');
	t.is(emoji, 'ğŸ‡¬ğŸ‡§', 'Should return ğŸ‡¬ğŸ‡§ for UK');
});

test('converts partial name', t => {
	const emoji = flag('Czech');
	t.is(emoji, 'ğŸ‡¨ğŸ‡¿', 'Should return ğŸ‡¨ğŸ‡¿ for Czechia');
});

test('converts alternative name', t => {
	const emoji = flag('North Korea');
	t.is(emoji, 'ğŸ‡°ğŸ‡µ', 'Should return ğŸ‡°ğŸ‡µ for North Korea');
});

test('converts weird name notation', t => {
	const emoji = flag('Virgin Islands, British');
	t.is(emoji, 'ğŸ‡»ğŸ‡¬', 'Should return ğŸ‡»ğŸ‡¬ for Virgin Islands, British');
});

test('converts less weird name notation', t => {
	const emoji = flag('U.S. Virgin Islands');
	t.is(emoji, 'ğŸ‡»ğŸ‡®', 'Should return ğŸ‡»ğŸ‡® for U.S. Virgin Islands');
});

test('converts partial name with weird characters', t => {
	const emoji = flag('CÃ´te');
	t.is(emoji, 'ğŸ‡¨ğŸ‡®', 'Should return ğŸ‡¨ğŸ‡® for CÃ´te d\'Ivoire');
});

test('converts name with different casing', t => {
	const emoji = flag('EGYPT');
	t.is(emoji, 'ğŸ‡ªğŸ‡¬', 'Should return ğŸ‡ªğŸ‡¬ for EGYPT');
});

test('converts if name within string', t => {
	const emoji = flag('China number two!');
	t.is(emoji, 'ğŸ‡¨ğŸ‡³', 'Should return ğŸ‡¨ğŸ‡³ for string containing China');
});

test('converts when `&` used in place of `and`', t => {
	const emoji = flag('Trinidad & Tobago');
	t.is(emoji, 'ğŸ‡¹ğŸ‡¹', 'Should return ğŸ‡¹ğŸ‡¹ for Trinidad and Tobago');
});

test('converts country name where substring match with other country exists', t => {
	const emoji = flag('South Sudan');
	t.is(emoji, 'ğŸ‡¸ğŸ‡¸', 'Should return ğŸ‡¸ğŸ‡¸ for South Sudan');
});

test('fails on name conflict', t => {
	const emoji = flag('Korea');
	t.is(emoji, undefined, 'Should return undefined for name conflict Korea');
});

test('fails if two names in string', t => {
	const emoji = flag('Poland & Hungary');
	t.is(emoji, undefined, 'Should return undefined for string containing two names');
});

test('fails on no match', t => {
	const emoji = flag('there is no country named like that');
	t.is(emoji, undefined, 'Should return undefined for no match');
});

//
// from country CODES
//
test('converts if existing code given', t => {
	const emoji = flag('MA');
	t.is(emoji, 'ğŸ‡²ğŸ‡¦', 'Should return ğŸ‡²ğŸ‡¦ for code MA');
});

test('fails if not existing code given', t => {
	const emoji = flag('XX');
	t.is(emoji, undefined, 'Should return undefined for non-existing code XX');
});

//
// from country FLAG
//
test('fails if emoji given', t => {
	const emoji = flag('ğŸ‡ªğŸ‡¬');
	t.is(emoji, undefined, 'Should return undefined if emoji is given as input');
});
